// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	pandora "github.com/nlowe/mousiki/pandora"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// AddFeedback provides a mock function with given fields: trackToken, isPositive
func (_m *Client) AddFeedback(trackToken string, isPositive bool) error {
	ret := _m.Called(trackToken, isPositive)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(trackToken, isPositive)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddTired provides a mock function with given fields: trackToken
func (_m *Client) AddTired(trackToken string) error {
	ret := _m.Called(trackToken)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(trackToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMoreTracks provides a mock function with given fields: stationId
func (_m *Client) GetMoreTracks(stationId string) ([]pandora.Track, error) {
	ret := _m.Called(stationId)

	var r0 []pandora.Track
	if rf, ok := ret.Get(0).(func(string) []pandora.Track); ok {
		r0 = rf(stationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pandora.Track)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(stationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNarrative provides a mock function with given fields: stationId, musicId
func (_m *Client) GetNarrative(stationId string, musicId string) (pandora.Narrative, error) {
	ret := _m.Called(stationId, musicId)

	var r0 pandora.Narrative
	if rf, ok := ret.Get(0).(func(string, string) pandora.Narrative); ok {
		r0 = rf(stationId, musicId)
	} else {
		r0 = ret.Get(0).(pandora.Narrative)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(stationId, musicId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStations provides a mock function with given fields:
func (_m *Client) GetStations() ([]pandora.Station, error) {
	ret := _m.Called()

	var r0 []pandora.Station
	if rf, ok := ret.Get(0).(func() []pandora.Station); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pandora.Station)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: username, password
func (_m *Client) Login(username string, password string) error {
	ret := _m.Called(username, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(username, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
